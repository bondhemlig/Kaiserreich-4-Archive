on_actions = {
	on_startup = {
		effect = {

			#Opinion Modifiers Setup
			every_country = { country_event = kr.political.40 }
			#Party Popularity Setup
			every_country = { country_event = kr.political.11 }

			# Setup up a player array
			every_country = {
				limit = {
					is_ai = no
				}
				add_to_array = { # It will automatically add the scope
					array = global.players
				}
			}

			if = {
				limit = {
					check_variable = {global.players^num > 1}
				}
				set_global_flag = is_mp
				else = {
					set_global_flag = is_not_mp
				}
			}

			#Intro Event
			for_each_scope_loop = {
				array = global.players
				country_event = kr.political.24
			}


			#Kill those cores
			random_country = {
				limit = { is_ai = yes }
				country_event = kr.political.10
			}
			#Faction Opinion Modifiers
			every_country = {
				limit = {
					OR = {
						is_in_faction_with = GER
						is_subject_of = GER
					}
				}
				country_event = kr.political.50
			}
			every_country = {
				limit = {
					is_in_faction_with = CAN
				}
				country_event = kr.political.52
			}
			every_country = {
				limit = {
					is_in_faction_with = FRA
				}
				country_event = kr.political.54
			}
			GUA = {
				set_variable = { var = UFC_power value = 50 }
				CA_SET_UFC_VAR = yes
				add_dynamic_modifier = {
					modifier = CEN_united_fruit_land
				}
				remove_ideas = { GUA_united_fruit_start_clone }
				add_ideas = { GUA_united_fruit }
			}
			CAF = {
				set_variable = { var = CAF_socialist_anger value = 34 }
				set_variable = { var = CAF_british_anger value = 21 }
			}
			GER = {
				# limit = { NOT = { has_dlc = "Together for Victory" } }
				GER = { country_event = { id = kr.political.56 days = 7 } }
			}

			# Set up news events settings
			if = {
				limit = {
					has_game_rule = {
						rule = KR_news_events
						option = NEWS_EVENTS_ALL
					}
				}
				set_global_flag = NEWS_ALL
			}
			else_if = {
				limit = {
					has_game_rule = {
						rule = KR_news_events
						option = NEWS_EVENTS_SOME
					}
				}
				set_global_flag = NEWS_SOME
			}

			# Set up the map, according to option selected
			if = {
				limit = {
					has_global_flag = is_not_mp
					has_game_rule = {
						rule = map_names_style
						option = MAP_USE_ENDONYM
					}
				}
				set_global_flag = endonyms
				random_country = {
					limit = { is_ai = yes }
					country_event = krendonyms.1
				}
			}
			else = {
				set_global_flag = exonyms
			}
			#Setup Resource Concessions AZE
			AZE = {
				give_resource_rights = {
					receiver = GER state = 990
				}
			}
		}
	}

	#ROOT is subject FROM is previous overlord
	on_subject_free = {
		effect = {
			log = "[GetDateText] [Root.GetName]: on_subject_free FORMER OVERLORD: [From.GetName]"
			clr_country_flag = KR_can_raise_autonomy_level
			clr_country_flag = KR_can_lower_autonomy_level
			clr_country_flag = KR_can_be_annexed
			clr_country_flag = KR_can_become_free
		}
	}

	#ROOT is subject FROM is overlord
	on_subject_autonomy_level_change = {

		effect = {
			log = "[GetDateText] [Root.GetName]: on_subject_autonomy_level_change OVERLORD: [From.GetName]"
			clr_country_flag = KR_can_raise_autonomy_level
			clr_country_flag = KR_can_lower_autonomy_level
		}
	}

	#ROOT is subject FROM is overlord
	on_subject_annexed = {
		effect = {
			log = "[GetDateText] [Root.GetName]: on_subject_annexed OVERLORD: [From.GetName]"
			clr_country_flag = KR_can_raise_autonomy_level
			clr_country_flag = KR_can_lower_autonomy_level
			clr_country_flag = KR_can_be_annexed
			clr_country_flag = KR_can_become_free
		}
	}

	#ROOT is winner #FROM gets annexed - For civil wars on_civil_war_end is also fired
	on_annex = {
		effect = {
			log = "[GetDateText] [Root.GetName] has annexed [From.GetName]"
			if = {
				limit = {
					FROM = { has_country_flag = ACW_has_deal_with_devil }
				}
				FROM = { clr_country_flag = ACW_has_deal_with_devil }
				every_country = {
					limit = { has_country_flag = ACW_deal_with_devil_@FROM }
					clr_country_flag = ACW_has_deal_with_devil
					clr_country_flag = ACW_deal_with_devil_@FROM
					FROM = { clr_country_flag = ACW_deal_with_devil_@PREV }
				}
			}
			if = {
				limit = {
					tag = HUN
					is_ai = yes
					FROM = { tag = AUS }
				}
				add_political_power = 200
			}
			FROM = {
				clr_country_flag = KR_can_raise_autonomy_level
				clr_country_flag = KR_can_lower_autonomy_level
				clr_country_flag = KR_can_be_annexed
				clr_country_flag = KR_can_become_free
			}
		}
	}

	#FROM is war target
	on_declare_war = {
		effect = {
			log = "[GetDateText] [Root.GetName] has declared war on [From.GetName]"
			FROM = { set_country_flag = had_war }
			ROOT = { set_country_flag = had_war }

			if = {
				limit = {
					FROM = {
						has_country_flag = ACW_has_deal_with_devil
						has_country_flag = ACW_deal_with_devil_@ROOT
					}
				}
				FROM = {
					clr_country_flag = ACW_has_deal_with_devil
					clr_country_flag = ACW_deal_with_devil_@ROOT
				}
				ROOT = {
					clr_country_flag = ACW_has_deal_with_devil
					clr_country_flag = ACW_deal_with_devil_@FROM
				}
			}

			# Attacking an American country post-ACW while it's in recovery
			if = {
				limit = {
					ROOT = {
						NOT = {
							tag = USA
							tag = CAL
							tag = TEX
							tag = CSA
						}
					}
					FROM = {
						OR = {
							tag = USA
							tag = CAL
							tag = TEX
							tag = CSA
						}
						OR = {
							has_idea = USA_civil_war_aftermath_idea
							has_idea = USA_civil_war_aftermath_idea2
							has_idea = USA_civil_war_aftermath_idea3
							has_idea = USA_civil_war_aftermath_idea4
							has_idea = USA_civil_war_aftermath_idea5
						}
						NOT = { has_country_flag = ACW_attacked_during_recovery }
					}
				}
				FROM = {
					set_country_flag = ACW_attacked_during_recovery
					country_event = amcivwar.615
				}
			}

			# Cancelling debt payements between Bolivia and Paraguay
			if = {
				limit = {
					OR = {
						ROOT = {
							tag = PAR
							NOT = {
								has_war_with = BOL
							}
						}
						FROM = {
							tag = PAR
							NOT = {
								has_war_with = BOL
							}
						}
					}
				}
				BOL = {
					country_event = {
						id = bol.19
						days = 2
						random = 24
					}
				}
			}
		}
	}

	#ROOT is winner #FROM is loser
	on_peaceconference_ended = {
		effect = {
			log = "[GetDateText] [Root.GetName] (ROOT) on_peaceconference_ended [From.GetName] (FROM)"
			ROOT = {
				if = {
					limit = { NOT = { has_country_flag = AI_move_unit_check } }
					country_event = kr.political.200
				}
			}
			FROM = {
				if = {
					limit = { NOT = { has_country_flag = AI_move_unit_check } }
					country_event = kr.political.200
				}
			}
		}
	}

	# ROOT is capitulated country, FROM is winner
	on_capitulation = {
		effect = {
			log = "[GetDateText] [Root.GetName] has capitulated to [From.GetName]"
			news_event = { id = country_capitulated.0 days = 0 }
			if = {
				limit = {
					OR = {
						is_in_faction_with = GER
						is_subject_of = GER
					}
					is_in_asia = yes
				}
				GER = {
					country_event = { id = asiapeace.1 days = 20 }
				}
			}
			if = {
				limit = {
					OR = {
						is_in_faction_with = HOL
						is_subject_of = HOL
					}
					is_in_asia = yes
				}
				HOL = {
					country_event = { id = asiapeace.4 days = 20 }
				}
			}
			if = {
				limit = {
					tag = INS
					has_war_with = DEI
				}
				DEI = {
					annex_country = {
						target = INS
						transfer_troops = no
					}
				}
			}
			if = {
				limit = {
					tag = FRA
					NOT = { has_global_flag = FRA_capitulated }
				}
				country_event = { id = capt.40 days = 1 }
			}
			# double-checking exile system
			if = {
				limit = {
					OR = {
						is_in_faction = yes
						is_subject = yes
					}
				}
				country_event = { id = kr.political.80 hours = 3 }
				every_country = {
					limit = { is_exiled_in = ROOT }
					country_event = { id = kr.political.80 hours = 3 }
				}
			}
		}
	}

	# ROOT is previously capitulated country
	on_uncapitulation = {
		effect = {
			log = "[GetDateText] [Root.GetName] has uncapitulated"
		}
	}

	on_leave_faction = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_leave_faction FROM = [From.GetName]"
			FROM = {
				add_opinion_modifier = {
					modifier = faction_traitor
					target = ROOT
					days = 365
				}

				add_opinion_modifier = {
					modifier = faction_traitor_trade
					target = ROOT
					days = 365
				}
			}
			ROOT = {
				if = {
					limit = { NOT = { has_country_flag = AI_move_unit_check } }
					country_event = kr.political.200
				}
			}
			FROM = {
				if = {
					limit = { NOT = { has_country_flag = AI_move_unit_check } }
					country_event = kr.political.200
				}
			}
		}
	}

	# FROM = country giving access, ROOT = country asking for access
	on_military_access = {
		effect = {
			log = "[GetDateText] [Root.GetName] has asked for military access to [From.GetName]"
		}
	}

	# FROM = country receiving access, ROOT = country offering access
	on_offer_military_access = {
		effect = {
			log = "[GetDateText] [Root.GetName] has offered military access to [From.GetName]"
		}
	}

	# FROM = country being called, ROOT = country calling
	on_call_allies = {
		effect = {
			log = "[GetDateText] [Root.GetName] has called its ally [From.GetName] into its war"
		}
	}

	# FROM = country being joined, ROOT = country joining
	on_join_allies = {
		effect = {
			log = "[GetDateText] [Root.GetName] is joining [From.GetName] in its war"
		}
	}

	# FROM = country receiving goods, ROOT = country sending goods
	on_lend_lease = {
		effect = {
			log = "[GetDateText] [Root.GetName] is offering a lend lease to [From.GetName]"
		}
	}

	# FROM = country requesting goods, ROOT = country sending goods
	on_incoming_lend_lease = {
		effect = {
			log = "[GetDateText] [From.GetName] has requested a lend lease from [From.GetName]"
		}
	}

	# FROM = country receiving volunteers, ROOT = country sending volunteers
	on_send_volunteers = {
		effect = {
			log = "[GetDateText] [Root.GetName] is sending volunteers to [From.GetName]"
			country_event = { id = kr.political.200 days = 30 }
		}
	}

	# FROM = country to which they're sent, ROOT = sending country
	on_send_expeditionary_force = {
		effect = {
			log = "[GetDateText] [Root.GetName] is sending an expeditionary force to [From.GetName]"
			country_event = { id = kr.political.200 days = 30 }
		}
	}

	# FROM = country from which the forces are returning, ROOT = country who sent them
	on_return_expeditionary_forces = {
		effect = {
			log = "[GetDateText] [Root.GetName] is recalling its expeditionary force from [From.GetName]"
		}
	}

	# FROM = country requesting them, ROOT = requesting country
	on_request_expeditionary_forces = {
		effect = {
			log = "[GetDateText] [From.GetName] has requested expeditionary forces from [Root.GetName]"
		}
	}

	# FROM = country on whom the wargoal is being generated, ROOT = country generating wargoal
	on_generate_wargoal = {
		effect = {
			log = "[GetDateText] [Root.GetName] is generating a wargoal on [From.GetName]"
		}
	}

	# FROM = country giving control of the state, ROOT = country asking for control of the state
	on_ask_for_state_control = {
		effect = {
			log = "[GetDateText] [Root.GetName] is asking for state control from [From.GetName]"
		}
	}

	# FROM = country accepting control of the state, ROOT = country giving control of the state
	on_give_state_control = {
		effect = {
			log = "[GetDateText] [Root.GetName] is giving state control to [From.GetName]"
		}
	}

	#FROM is state #ROOT is broken as hell
	on_nuke_drop = {

		effect = {
			news_event = { id = nuke_dropped.2 days = 1}
			news_event = { id = nuke_dropped.3 days = 1}
			news_event = { id = nuke_dropped.4 days = 1}
			news_event = { id = nuke_dropped.5 days = 1}
			news_event = { id = nuke_dropped.6 days = 1}
			news_event = { id = nuke_dropped.7 days = 1}
			news_event = { id = nuke_dropped.8 days = 1}
			news_event = { id = nuke_dropped.9 days = 1}
			news_event = { id = nuke_dropped.10 days = 1}
			news_event = { id = nuke_dropped.11 days = 1}
			news_event = { id = nuke_dropped.12 days = 1}
			news_event = { id = nuke_dropped.13 days = 1}
			news_event = { id = nuke_dropped.14 days = 1}
			news_event = { id = nuke_dropped.15 days = 1}
		}
		random_events = {
			100 = nuke_dropped.0
		}
	}

	# Ace pilots
	# country, FROM = ace
	on_ace_promoted = {
		random_events = {
			100 = ace_promoted.1
			5 = ace_promoted.2
		}
	}

	# country, FROM = ace, PREV = enemy ace
	# This event fires twice, once for each ace.
	on_aces_killed_each_other = {
		random_events = {
			100 = aces_killed_each_other.1
		}
	}

	# country, FROM = our ace,
	# PREV = enemy ace, has killed FROM
	on_ace_killed_by_ace = {
		random_events = {
			100 = ace_killed_by_ace.1
		}
	}

	# country, FROM = our ace,
	# PREV = enemy ace, killed by FROM
	on_ace_killed_other_ace = {
		random_events = {
			100 = ace_killed_other_ace.1
		}
	}

	# country, FROM = ace
	on_ace_killed = {
		random_events = {
			100 = ace_died.1
		}
	}

	#used when puppeting in a peace conference
	#ROOT = nation being puppeted, FROM = overlord
	on_puppet = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_puppet FROM = [From.GetName]"
		}
	}

	#used when puppeting through the occupied territories menu during peace time (or when releasing from non-core but owned territory, f.e. Britain releasing Egypt)
	#ROOT = nation being released, FROM = overlord
	on_release_as_puppet = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_release_as_puppet FROM = [From.GetName]"
		}
	}

	#ROOT is free nation FROM is releaser
	on_release_as_free = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_release_as_free FROM = [From.GetName]"
		}
	}

	#FROM is country getting invited.
	on_offer_join_faction = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_offer_join_faction FROM = [From.GetName]"
		}
	}

	#FROM is faction leader on join faction requests. THIS DOES NOT FIRE ON ADD_TO_FACTION EFFECT! USE ON_OFFER_JOIN_FACTION!
	on_join_faction = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_join_faction FROM = [From.GetName]"
		}
	}

	# When a new faction is formed
	on_faction_formed = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_faction_formed"
		}
	}

	on_government_change = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_government_change"
			country_event = { id = kr.political.11 days = 1 } #party popularity change

			if = {
				limit = {
					tag = BRA
					not_has_elected_government = yes
				}
				set_country_flag = BRA_is_dictatorship
			}
			else_if = {
				limit = {
					tag = HAW
					OR = {
						has_country_flag = HAW_monarchy_restored
						has_country_flag = HAW_republic_declared
						has_country_flag = HAW_revolution_commune_declared
					}
				}
				if = {
					limit = {
						has_country_flag = HAW_revolution_commune_declared
						has_socialist_government = no
					}
					clr_country_flag = HAW_revolution_commune_declared
					set_country_flag = HAW_republic_declared
				}
				else_if = {
					limit = {
						NOT = { has_country_flag = HAW_revolution_commune_declared }
						has_socialist_government = yes
					}
					set_country_flag = HAW_revolution_commune_declared
					clr_country_flag = HAW_monarchy_restored
					clr_country_flag = HAW_republic_declared
				}
				else_if = {
					limit = {
						has_country_flag = HAW_monarchy_restored
						has_elected_government = no
					}
					clr_country_flag = HAW_monarchy_restored
					set_country_flag = HAW_republic_declared
				}
			}
		}
	}

	#ROOT is new controller #FROM is old controller #FROM.FROM is state ID
	on_state_control_changed = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_state_control_changed OLD CONTROLLER: [From.GetName] STATE: [From.From.GetName]"
		}
	}

	on_new_term_election = {
		effect = {
			### Albania ###
			if = {
				limit = { tag = ALB }
				country_event = albania.3
				country_event = albania.30
			}
			### Argentina ###
			if = {
				limit = { tag = ARG }
				country_event = argdem.5
				country_event = argdem.6
				country_event = argdem.7
				country_event = argdem.71
			}
			### Australasia ###
			if = {
				limit = { tag = AST }
				country_event = austral.10
				country_event = austral.50
				country_event = austral.53
			}
			### Austria ###
			if = {
				limit = { tag = AUS }
				country_event = aus.elections.100
			}
			### Baltic Duchy ###
			if = {
				limit = { tag = BAT }	#Democratic Duchy
				country_event = balticduchy.171
			}
			### Belgium ###
			if = {
				limit = { tag = BEL }
				country_event = bel.1000
				country_event = bel.1001
				country_event = belind.14
			}
			### Bolivia
			if = {
				limit = { tag = BOL }
				country_event = bol.4
				country_event = bol.3
				country_event = bol.2
			}
			### Brazil ###
			if = {
				limit = { tag = BRA }
				country_event = bra.40
				country_event = bra.45
				country_event = bra.50
				country_event = bra.55
				country_event = bra.60
				country_event = bra.65
				country_event = bra.70
			}
			### Pacific States of America ###
			if = {
				limit = { tag = CAL }
				country_event = pacificstates.6
				country_event = pacificstates.11
				country_event = pacificstates.16
				country_event = pacificstates.21
			}
			### Costa Rica ###
			if = {
				limit = { tag = COS }
				country_event = cos.4
				country_event = cos.71
				country_event = cos.86
				country_event = cos.91
				country_event = cos.99
			}
			### Combined Syndicates of America ###
			if = {
				limit = { tag = CSA }
				country_event = csa.27
				country_event = csa.30
				country_event = csa.33
				country_event = csa.36
				country_event = csa.51
			}
			### Cuba ###
			if = {
				limit = { tag = CUB }
				country_event = { id = cuba.234 }
				country_event = { id = cuba.235 }
				country_event = { id = cuba.236 }
				country_event = { id = cuba.239 }
			}
			### Denmark ###
			if = {
				limit = { tag = DEN }
				country_event = { id = den.60 }
				country_event = { id = den.61 }
			}
			### Egypt ###
			if = {
				limit = { tag = EGY }
				country_event = egy.5
				country_event = egy.6
				country_event = egy.137
				country_event = egy.138
			}
			### Flanders ###
			if = {
				limit = { tag = FLN }
				country_event = fln.101	#Flemish Generic
			}
			### FOP ###
			if = {
				limit = { tag = FOP }
				country_event = fop.17	#Only 1938 Elections
			}
			### Germany ###
			if = {
				limit = { tag = GER }
				country_event = gerdom.27 #1937
				country_event = gerdom.32 #1937 (Election Cancelled)
				country_event = gerdom.33 #1942
				country_event = gerdom.37 #1942 (Election Cancelled)
			}
			### Greece ###
			if = {
				limit = { tag = GRE }
				country_event = gre.50 #Pre-Monarchy referendum
				country_event = gre.51 #Post-Monarchist Victory
				country_event = gre.52 #Post-Republican Victory
			}
			### Haiti ###
			if = {
				limit = { tag = HAI }
				country_event = { id = haiti.100 }
				country_event = { id = haiti.101 }
			}
			### Hawaii ###
			if = {
				limit = { tag = HAW }
				country_event = hawaii.27
				country_event = hawaii.34
				country_event = hawaii.64
			}
			### Netherlands ###
			if = {
				limit = { tag = HOL }
				country_event = hol.5
			}
			### Republic of Italy ###
			if = {
				limit = { tag = ITA	}
				country_event = ita.12	#1936
				country_event = ita.19	#1941
				country_event = ita.20	#1941 (Kingdom)
			}
			### Japan ###
			if = {
				limit = { tag = JAP }
				country_event = japdom.3	#1936
				country_event = japdom.54	#1940
				country_event = japdom.55	#1944
			}
			### Liberia ###
			if = {
				limit = { tag = LIB }
				country_event = LIB.3	#1939
			}
			### Mexico ###
			if = {
				limit = { tag = MEX }
				country_event = mexico.4
				country_event = mexico.11
				country_event = mexico.26
				country_event = mexico.27
				country_event = mexico.81
				country_event = mexico.82
				country_event = mexico.83
			}
			### New England ###
			if = {
				limit = { tag = NEE }
				country_event = newengland.24
				country_event = newengland.28
				country_event = newengland.32
				country_event = newengland.37
			}
			### Nicaragua ###
			if = {
				limit = { tag = NIC }
				country_event = nic.9
				country_event = nic.57
				country_event = nic.76
			}
			### Norway ###
			if = {
				limit = { tag = NOR }
				country_event = norway.14	#1936
				country_event = norway.30	#1939
				country_event = norway.33	#1942
			}
			### Panama ###
			if = {
				limit = { tag = PAN }
				country_event = panama.22	#1940
				country_event = panama.23	#1940, military
			}
			### Paraguay ###
			if = {
				limit = { tag = PAR }
				country_event = par.15	#1941
				country_event = par.16	#1946 (Estigarribato)
				country_event = par.19	#1946
				country_event = par.17	#1951 (Estigarribato)
				country_event = par.21	#1951
				country_event = par.18	#1956 (Estigarribato)
				country_event = par.22	#1956
			}
			### Poland ###
			if = {
				limit = { tag = POL }
				country_event = poland.45
				country_event = poland.46
				country_event = poland.47
				country_event = poland.48
				country_event = poland.49
			}
			### Peru ###
			if = {
				limit = { tag = PRU }
				country_event = pru.108
			}
			### South Africa ###
			if = {
				limit = { tag = SAF }
				country_event = saf.26
				country_event = saf.90
				country_event = saf.91
				country_event = saf.93
			}
			### Scandinavia ###
			if = {
				limit = { tag = SCA }
				country_event = scandinavia.3
			}
			### Serbia ###
			if = {
				limit = { tag = SER }
				country_event = serbia.6
				country_event = serbia.7
				country_event = serbia.8
				country_event = serbia.9
			}
			### Siam ###
			if = {
				limit = { tag = SIA }
				country_event = siamn.23	#1936
			}
			### Sweden ###
			if = {
				limit = { tag = SWE }
				country_event = { id = swe.8 }
				country_event = { id = swe.55 }
			}
			### Switzerland ###
			if = {
				limit = { tag = SWI }
				country_event = swiss.51
			}
			### Two Sicilies ###
			if = {
				limit = { tag = SIC }
				country_event = sic.10
				country_event = sic.11
			}
			### Sardinia ###
			if = {
				limit = { tag = SRD }
				country_event = srd.29
				country_event = srd.30
			}
			### American Union State ###
			if = {
				limit = { tag = TEX }
				country_event = unionstate.10
			}
			### Uruguay ###
			if = {
				limit = { tag = URG }
				country_event = urg.20
				country_event = urg.21
				country_event = urg.22
				country_event = urg.30
				country_event = urg.31
				country_event = urg.32
				country_event = urg.48
				country_event = urg.49
				country_event = urg.50
				country_event = urg.51
				country_event = urg.52
			}
			### United States of America ###
			if = {
				limit = { tag = USA }
				country_event = ustates.34
				country_event = ustates.35
				country_event = ustates.203
				country_event = ustates.207
				country_event = ustates.213
				country_event = ustates.218
			}
			### Venezuela ###
			if = {
				limit = { tag = VEN }
				country_event = ven.3
				country_event = ven.29
				country_event = ven.30
				country_event = ven.31
				country_event = ven.32
			}
			### Wallonia ###
			if = {
				limit = { tag = WLL }
				country_event = wll.718
			}
			### West Indies ###
			if = {
				limit = { tag = CAF }
				country_event = wifpol.30
			}
			### Yucatan ###
			if = {
				limit = { tag = YUC }
				country_event = yucatan.20
				country_event = yucatan.21
			}
		}
	}

	on_army_leader_daily = {}

	# From is owner country
	on_army_leader_won_combat = {
		effect = {
			if = {
				limit = {
					NOT = { has_unit_leader_flag = recent_leader_event }
					check_variable = { random < 0.05 }
				}
				log = "[GetDateText] [Root.GetName] on_army_leader_won_combat [From.GetName]"
				set_unit_leader_flag = unit_leader_event
				unit_leader_event = { id = unit_leader.10 }
			}
		}
	}

	# From is owner country
	on_army_leader_lost_combat = {
		effect = {
			if = {
				limit = {
					NOT = { has_unit_leader_flag = recent_leader_event }
					check_variable = { random < 0.06 }
				}
				log = "[GetDateText] [Root.GetName] on_army_leader_lost_combat [From.GetName]"
				set_unit_leader_flag = unit_leader_event
				unit_leader_event = { id = unit_leader.10 }
			}
		}
	}

	on_army_leader_promoted = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_army_leader_promoted [From.GetName]"
			add_timed_unit_leader_trait = {
				trait = recently_promoted
				days = 100
			}
		}
	}

	# New Scopes
	# Scope is the country owner of the PotF, FROM is the country of the killer
	on_pride_of_the_fleet_sunk = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_pride_of_the_fleet_sunk [From.GetName]"

		}
	}

	#ROOT is winner #FROM gets annexed - This fires just before FROM gets annexed, meaning the country and everything it owns still exists. It will also fire on_annex and on_civil_war_end
	on_civil_war_end_before_annexation = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_civil_war_end_before_annexation [From.GetName]"

		}
	}
	on_civil_war_end = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_civil_war_end [From.GetName]"

		}
	}
	on_unit_leader_created = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_unit_leader_created"

		}
	}

	on_government_exiled = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_government_exiled"
		}
	}

	# Here for testing

	#Root is exile
	#From is new host
	#FromFrom is old host
	on_host_changed_from_capitulation = {
		effect = {
			#Transfer exile leaders to new host
			From.From = {
				every_army_leader = {
					limit = { is_exiled_leader_from = Root }
					set_nationality = Root.From
				}
			}
		}
	}

	#Root is exile
	#From is old host
	on_exile_government_reinstated = {
		effect = {
			From = {
				every_army_leader = {
					limit = { is_exiled_leader_from = Root }
					set_nationality = Root
				}
			}
			Root = {
				every_army_leader = {
					limit = { is_exiled_leader_from = Root }
					remove_unit_leader_trait = exiled_leader
					remove_exile_tag = yes
				}
			}
		}
	}
}
